function generateHuygensBatchFile_clean(huygens_batch_filepath, decon_params)
% expect struct array with fields:
%   - microscopeTemplate (name of Huygens microscope template)
%   - deconvolutionTemplate (name of Huygens deconvolutin template)
%   - input_file_path (complete input file path)
%   - output_dir (constant output dir (must be the same for all files!))
%   - output_file_name (Name of the deconvolution result)
%   - dxy (planar pixel size in nm)
%   - dz (axial sampling interval in nm)
%   - numerical_aperture_objective (NA of the used objective)
%   - refractive_index_medium (refractive index of objective immersion medium)
%   - excitation_wavelength (fluorophore excitation wavelength (i.e. 488 for GFP))
%   - emission_wavelength (fluorophore emission wavelength (i.e. 520 for GFP))
%   - num_iterations (number of iterations for blind deconvolution algorithm)
%   - quality_threshold (quality improvement between steps, which stops the iterations)
%   - signal_to_noise_ratio (target signal to noise ratio)
%
% Single file example:
%
% decon_params = [];
% decon_params.microscope_template = 'drescher_100x_SiOil_2xlens'; % or 'drescher_100x_Oil_2xlens'
% decon_params.deconvolution_template = 'biofilms'; % 
% decon_params.input_file_path = 'dummy.tif';
% decon_params.output_dir = 'debug';
% decon_params.output_file_name = 'dummy_dcv.tif';
% decon_params.dxy = 0.063;
% decon_params.dz = 0.4;
% decon_params.numerical_aperture_objective = 1.35;
% decon_params.refractive_index_medium = 1.406;
% decon_params.excitation_wavelength = 488;
% decon_params.emission_wavelength = 520;
% decon_params.num_iterations = 60;
% decon_params.quality_threshold = 0.001;
% decon_params.signal_to_noise_ratio = 20;

if isempty(decon_params)
    error('Passed empty parameter struct to "generateHuygensBatchFile"')
    return
end

if all(strcmp(decon_params(1).output_dir, {decon_params.output_dir}))
    output_dir = decon_params(1).output_dir;
else
    error('Only one output directory possible per Huygens batch file!')
    return
end

batch_file_dir = fileparts(huygens_batch_filepath);

if ~isfolder(batch_file_dir)
	mkdir(batch_file_dir);
end

header_template = [ ...
    '# Huygens Batch processing template file%1$s', ...
    '# Format: nested Tcl-style list%1$s', ...
    '# Saved: %2$s%1$s', ...
    'info {', ...
        'title {Batch processing template} ', ...
        'version 2.5 ', ...
        'templateName batch_%3$s ', ...
        ' date {%2$s}', ...
    '}'];

tasklist_template = [ ...
    'taskList {setEnv %2$s}%1$s', ...
    'setEnv {' , ...
        'resultDir {%3$s} ', ...
        'perJobThreadCnt auto ', ...
        'concurrentJobCnt 2 ', ...
        'exportFormat {type tiff16 multidir 1 cmode clip} ', ...
        'inputConversion int ', ...
        'timeOut 10000}'];
    
tasklist_subtemplate = ...
    'taskID:%1$d ';

task_template = [...
        'taskID:%1$d {', ...
            'info {', ...
                'state readyToRun tag {', ...
                    'setp %2$s ', ...
                    'decon %3$s', ...
                '} ', ...
                'timeStartAbs 1537191124 ', ...
                'timeOut 320000', ...
            '} ', ...
            'taskList {imgOpen setp hotPix cmle:0 imgSave} ', ...
            'imgOpen {',...
                'path {%4$s} ', ...
                'series auto ', ...
                'index 0',...
            '} ', ...
            'imgSave {', ...
                'rootName {%5$s}', ...
            '} ', ...
            'setp {', ...
                's {%6$.5f %6$.5f %7$.5f 1.0000} ', ...
                'parState,s verified ', ...
                'dx %8$.4f parState,dx verified ', ...
                'dy %8$.4f parState,dy verified ', ...
                'dz %9$.4f parState,dz verified ', ...
                'dt 1.0000 parState,dt verified ', ...
                'iFacePrim 0.0 parState,iFacePrim verified ', ...
                'iFaceScnd 0.0 parState,iFaceScnd verified ', ...
                'micr {nipkow} parState,micr {verified} ', ...
                'na {%10$.2f} parState,na {verified} ', ...
                'objQuality {perfect} parState,objQuality verified ', ...
                'ri {1.338} parState,ri verified ', ...
                'ril {%11$.3f} parState,ril verified ', ...
                'ps {5} parState,ps verified ', ...
                'pr {250} parState,pr verified ', ...
                'ex {%12$d} parState,ex verified ', ...
                'em {%13$d} parState,em verified ', ...
                'pcnt {1} parState,pcnt verified ', ...
                'ppu {1.0} parState,ppu verified ', ...
                'baseline {0.0} parState,baseline verified ', ...
                'lineAvgCnt {1} parState,lineAvgCnt verified ', ...
                'exBeamFill {2.0} parState,exBeamFill verified ', ...
                'imagingDir {upward} parState,imagingDir verified ', ...
                'stedMode {vortexPulsed} parState,stedMode verified ', ...
                'stedSatFact {40} parState,stedSatFact verified ', ...
                'stedLambda {676} parState,stedLambda verified ', ...
                'stedImmunity {10} parState,stedImmunity verified ', ...
                'stedCoeff {{2.1 8.0 0.01 2.1 8.0 0.01}} parState,stedCoeff verified ', ...
                'sted3D {0} parState,sted3D verified ', ...
                'spimExc {gauss} parState,spimExc verified ', ...
                'spimNA {0.03} parState,spimNA verified ', ...
                'spimFill {0.5} parState,spimFill verified ', ...
                'spimGaussWidth {4.0} parState,spimGaussWidth verified ', ...
                'spimCenterOff {0} parState,spimCenterOff verified ', ...
                'spimFocusOff {0} parState,spimFocusOff verified ', ...
                'spimDir {0} parState,spimDir verified ', ...
                'scatterModel {exp} parState,scatterModel verified ', ...
                'scatterFreePath {100.0} parState,scatterFreePath verified ', ...
                'scatterRelContrib {50} parState,scatterRelContrib verified ', ...
                'scatterBlurring {0.0} parState,scatterBlurring verified ', ...
                'allVerified 1 userDefConfidence noMetaData', ...
            '} ', ...
            'hotPix {hotPath {}} ', ...
            'stabilize {enabled 1} ', ...
            'cmle:0 {', ...
                'psfMode auto ', ...
                'psfPath {} ', ...
                'psfChan {} ', ...
                'mode fast ', ...
                'it %14$d ', ...
                'q %15$.3f ', ...
                'pad auto ', ...
                'bgMode auto ', ...
                'bgRadius 0.7 ', ...
                'blMode auto ', ...
                'brMode auto ', ...
                'varPsf auto ', ...
                'varPsfCnt 1 ', ...
                'sn %16$.0f ', ...
                'bg 0.0 timeOut 10000', ...
            '}', ...
        '}'];
N = numel(decon_params);
    
% Create tasks
tasklist_subtemplate_rendered = '';
tasks_template_rendered = cell(N, 1);

for i=1:N
    task_id = i-1;
    
    tasklist_subtemplate_rendered = [...
        tasklist_subtemplate_rendered, ...
        sprintf(tasklist_subtemplate, ...
                task_id)];
    
    tasks_template_rendered{i} = sprintf(task_template, ...
            task_id, ...  %1$d
            decon_params(i).microscope_template, ... %2$s
            decon_params(i).deconvolution_template, ... %3$s
            strrep(decon_params(i).input_file_path, '\', '/'), ... %4$s
            decon_params(i).output_file_name, ... %5$s
            decon_params(i).dxy, ... %6$.5f
            decon_params(i).dz, ... %7$.5f
            decon_params(i).dxy*1000, ... %8$.4f
            decon_params(i).dz*1000, ... %9$.4f
            decon_params(i).numerical_aperture_objective, ... %10$.2f
            decon_params(i).refractive_index_medium, ... %11$.3f
            decon_params(i).excitation_wavelength, ... %12$d
            decon_params(i).emission_wavelength, ... %13$d
            decon_params(i).num_iterations, ... %14$d
            decon_params(i).quality_threshold, ... %15$.3f
            decon_params(i).signal_to_noise_ratio ... %16$.0f
            );
end

%Batchfile
batchFile = [];
batchFile{1} = sprintf(header_template, ...
    newline, ...
    datestr(clock, 'ddd mmm dd HH:MM:SS +0200 yyyy'), ...
    datestr(clock, 'yyyy-mm-dd_HH-MM-SS'));

batchFile{2} = sprintf(tasklist_template, ...
    newline, ...
    tasklist_subtemplate_rendered, ...
    strrep(output_dir, '\', '/'));

batchFile(3:3+N-1) = tasks_template_rendered;

% Add line endings and write file 
batchFile = cellfun(@(x) [x, newline], batchFile, 'UniformOutput', false);

fileID = fopen(huygens_batch_filepath, 'w');
fprintf(fileID, '%s', batchFile{:});
fclose(fileID);

fprintf('      - batch-file for Huygens Essential created [%s], containing %d images\n', huygens_batch_filepath, N);