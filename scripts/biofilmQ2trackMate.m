function biofilmQ2trackMate( ...
    output_xml, ...
    output_translations, ...
    output_crop, ...
    input_tifffile, ...
    input_folder)

    pattern = '*_data.mat';

    file_list = dir(fullfile(input_folder, pattern));
    % file_list = file_list(1:10);

    [tiff_stack_folder, tiff_stack_name, ext] = fileparts(input_tifffile);
    tiff_stack_name = [ tiff_stack_name, ext];

    Nx = 1024;
    Ny = 1024;
    Nz = 54;
    Nt = 114;
    dx = 0.063;
    dy = 0.063;
    dz = 0.4;



    dt = 1.0;

    spot_template = {''};

    N = numel(file_list);
    trans = zeros(N, 3);
    crops = zeros(N, 3);

    n_total = 0;
    for i = 1:N
        spot_template{end+1} = sprintf('      <SpotsInFrame frame="%d">', i-1);
        stats_ = load(fullfile(file_list(i).folder, file_list(i).name), 'stats', 'metadata');

        cropRange = stats_.metadata.data.cropRange;
        crops(i, 1:2) = [cropRange(1), cropRange(2)];
        trans(i, :) = stats_.metadata.data.registration.T(end, 1:3);

        stats_ = stats_.stats;
        for j = 1:numel(stats_)
            centroid = stats_(j).Centroid;
            radius = nthroot(stats_(j).Shape_Volume/ pi * 3/4, 3);
            n_total = n_total + 1;
            spot_template{end+1} = [ ...
                sprintf('        <Spot ID="%d" ', n_total), ...
                sprintf('name="ID%d" ', n_total), ...
                sprintf('QUALITY="%f" ', 1), ...
                sprintf('POSITION_T="%f" ', (i-1)*dt), ...
                sprintf('MAX_INTENSITY="%d" ', 1), ...
                sprintf('FRAME="%d" ', i-1), ...
                sprintf('MEDIAN_INTENSITY="%f" ', 1), ...
                sprintf('VISIBILITY="%f" ', 1), ...
                sprintf('MEAN_INTENSITY="%f" ', 1), ...
                sprintf('TOTAL_INTENSITY="%f" ', 1), ...
                sprintf('ESTIMATED_DIAMETER="%f" ', 1), ...
                sprintf('RADIUS="%f" ', radius), ...
                sprintf('SNR="%f" ', 1), ...
                sprintf('POSITION_X="%f" ',  -trans(i, 1) + cropRange(1) + centroid(1)), ...
                sprintf('POSITION_Y="%f" ', -trans(i, 2) + cropRange(2) + centroid(2)), ...
                sprintf('STANDARD_DEVIATION="%f" ', 1), ...
                sprintf('CONTRAST="%f" ', 1), ...
                sprintf('MANUAL_COLOR="%d" ', 1), ...
                sprintf('MIN_INTENSITY="%f" ', 1), ...
                sprintf('POSITION_Z="%f" />', (-trans(i, 3) + centroid(3)) / dz * dx)];
        end
        spot_template{end+1} = sprintf('      </SpotsInFrame>');
    end

    spot_template{1} = sprintf('    <AllSpots nspots="%d">', n_total)    ;
    spot_template{end+1} = '    </AllSpots>';
    spot_template = cellfun(@(line) [line, newline], spot_template, 'un', 0);

    spot_template = sprintf('%s', spot_template{:});
    % write settings:

    image_data_settings = [ ...
        sprintf('    <ImageData filename="%s" ', tiff_stack_name), ...
        sprintf('folder="%s" ', tiff_stack_folder), ...
        sprintf('width="%d" ', Nx), ...
        sprintf('height="%d" ', Ny), ...
        sprintf('nslices="%d" ', Nz), ...
        sprintf('nframes="%d" ', Nt), ...
        sprintf('pixelwidth="%f" ', dx), ...
        sprintf('pixelheight="%f" ', dy), ...
        sprintf('voxeldepth="%f" ', dz), ...
        sprintf('timeinterval="%f" />', dt)];

    basic_settings = [ ...
        sprintf('    <BasicSettings xstart="0" xend="%d" ', Nx-1), ...
        sprintf('ystart="0" yend="%d" ', Ny-1), ...
        sprintf('zstart="0" zend="%d" ', Nz-1), ...
        sprintf('tstart="0" tend="%d" />', Nt-1)];


    fname = 'resources/template_TrackMate_MATLAB.xml';

    boilerplate_text = fileread(fname);
    boilerplate_text = splitlines(boilerplate_text);
    boilerplate_text = cellfun(@(line) [line, newline], boilerplate_text, 'un', 0);
    boilerplate_text = sprintf('%s', boilerplate_text{:});
    xml_file  = sprintf(boilerplate_text, ...
        spot_template, image_data_settings, basic_settings);

    mid = fopen(output_xml, 'w');
    fprintf(mid,'%s',xml_file);
    fclose(mid);

    

    writematrix(trans,output_translations); 
    writematrix(crops,output_crop);
    return


end